//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
       int source_node = 1;
       vector<vector<pair<int,int>>>adj(n+1);
       vector<int>dist(n+1, 1e8);
       vector<int>par(n+1);
       for(int i=1;i<n+1;i++)
       {
           par[i]=i;
       }
       for(int i=0;i<edges.size();i++)
       {
           adj[edges[i][0]].push_back({edges[i][1], edges[i][2]});
           adj[edges[i][1]].push_back({edges[i][0], edges[i][2]});

       }
       priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int,int>>> q;
       q.push({0,source_node});
       dist[source_node]=0;
       while(!q.empty())
       {
           auto curr = q.top(); 
           q.pop();
           int curr_node = curr.second;
           int curr_dist = curr.first;
           for(auto it: adj[curr_node])
           {
               int edge_weight = it.second;
               int adj_node = it.first;
               if(curr_dist+edge_weight<dist[adj_node])
               {
                   dist[adj_node]=curr_dist+edge_weight;
                   q.push({dist[adj_node], adj_node});
                   par[adj_node]=curr_node;
               }
           }
       }
       int i=n;
       if (dist[n] == 1e8)
            return {-1};
       vector<int>ans;
       while(par[i]!=i)
       {
            ans.push_back(i);
           i=par[i];
          
       }
       ans.push_back(1);
       reverse(ans.begin(), ans.end());
       return ans;
    }
};

//{ Driver Code Starts.
int main() {
    // your code goes here
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n >> m;
        vector<vector<int>> edges;
        for (int i = 0; i < m; ++i) {
            vector<int> temp;
            for (int j = 0; j < 3; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }

        Solution obj;
        vector<int> res = obj.shortestPath(n, m, edges);
        for (auto x : res) {
            cout << x << " ";
        }
        cout << "\n";
    }
}

// } Driver Code Ends
