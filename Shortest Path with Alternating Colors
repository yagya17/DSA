class Solution {
public:
    vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red, vector<vector<int>>& blue) {
        vector<vector<bool>> vis(n, vector<bool>(2));
        vector<int>ans(n,-1);
        vector<vector<pair<int,int>>>edg(n);
        queue<vector<int>>q;
        for(int i=0;i<red.size();i++)
        {
          edg[red[i][0]].push_back({red[i][1],0});
        }
     
        for(int i=0;i<blue.size();i++)
        {
          edg[blue[i][0]].push_back({blue[i][1],1});
        }
        
        q.push({0,0,-1}); vis[0][1]=1; vis[0][0]=1; ans[0]=0;
        while(!q.empty())
        {
            auto elem=q.front();
            int curr=elem[0]; int steps=elem[1]; int currcol=elem[2]; q.pop();
            for(auto &[adj,col]:edg[curr])
            {
                  if(!vis[adj][col]&&col!=currcol)
                  { q.push({adj,steps+1,col}); vis[adj][col]=1;
                  if(ans[adj]==-1)ans[adj]=steps+1;
                  }
                  
            }
        }
        return ans;
    }
};
