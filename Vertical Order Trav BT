/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,map<int,multiset<int>>> m;
        queue<pair<TreeNode*,pair<int,int>>>q;
        q.push({root,{0,0}});
        while(!q.empty())
        {
            int lvl=q.front().second.first;
            int line=q.front().second.second;
            cout<<1;
            m[line][lvl].insert(q.front().first->val);
          
            if(q.front().first->left) q.push({q.front().first->left,{lvl+1,line-1}});
            if(q.front().first->right) q.push({q.front().first->right,{lvl+1,line+1}});
              q.pop();
        }
         vector<vector<int>>ans;
        for(auto i:m)
        {
              vector<int>col;
            for(auto q:i.second)
            {col.insert(col.end(),q.second.begin(),q.second.end());}
            ans.push_back(col);
        }
        return ans;
    }
};
