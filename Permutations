class Solution {
public:
void sol(int index, int n,vector<int>nums, vector<int>temp, vector<vector<int>>&ans)
{
    if(index==nums.size())
    {
        ans.push_back(nums); return;
    }

    for(int i=index;i<n;i++)
    {
        swap(nums[index], nums[i]);
        sol(index+1, n, nums, temp, ans);
        swap( nums[i], nums[index]);

    }
}
    vector<vector<int>> permute(vector<int>& nums) {
        int n=nums.size();
        vector<int>temp; vector<vector<int>>ans;
        sol( 0, n,nums,  temp, ans);
        return ans;
    }
};





class Solution {
public:
void sol(int n,vector<int>nums,vector<int>vis, vector<int>temp, vector<vector<int>>&ans)
{
    if(temp.size()==n)
    {
        ans.push_back(temp); return;
    }

    for(int i=0;i<n;i++)
    {
        if(vis[i]==0)
        {
            temp.push_back(nums[i]);
            vis[i]=1;
            sol(n, nums, vis, temp, ans);
            vis[i]=0;
            temp.pop_back();
        }
    }
}
    vector<vector<int>> permute(vector<int>& nums) {
        int n=nums.size();
        vector<int>vis(n,0);
        vector<int>temp; vector<vector<int>>ans;
        sol( n,nums, vis, temp, ans);
        return ans;
    }
};


















