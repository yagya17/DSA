/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
BRUTE FORCE
TC:
SC:O(N)
class Solution {
public:
    Node* copyRandomList(Node* head) {
       unordered_map< Node*, Node*>m;
        Node *copy=head;

        Node *head_copy=head;
        while(head)
        {
          Node* newe= new Node(head->val);
            m[head]=newe;
            head=head->next;
        }
        while(head_copy)
        {
            // i->second->next=i->first->next->second;
            // i->second->random=i->first->random->second;
            m[head_copy]->next=m[head_copy->next];
            m[head_copy]->random=m[head_copy->random];
            head_copy=head_copy->next;
        }
        
        return m[copy];
        
    }
};


//OPTIMISED
TC:O(N)
SC:O(1)
/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {

        
          Node *temp=head;
       
        while(temp)
        {
          Node* newe= new Node(temp->val);
          newe->next=temp->next;
          temp->next=newe;
            temp=newe->next;
        }
        Node *copy=head;
        while(copy)
        {
            if(copy->random) copy->next->random=copy->random->next;
            copy=copy->next->next;
        }
        Node *head_copy=head;
        Node *dummy=new Node(0);
        Node *ans=dummy;
        Node *fast;
        while(head_copy)
        {   fast=head_copy->next->next;
            dummy->next=head_copy->next;
            head_copy->next=fast;
            dummy=dummy->next;
         head_copy=fast;
            
        }
        return ans->next;
        
    }
};
