// SOURCE NODE = 0, USING PRIORITY QUEUE

int main()
{
    int n;cin>>n;int m;cin>>m;
    int dist[n+1];
vector<pair<int,int>>rel[m];
    for(int i=0;i<=n;i++)
    {
      dist[i]=INT_MAX;
    }
    for(int i=0;i<m;i++)
    {  int a;int b;int w;
      cin>>a>>b>>w;
      rel[a].push_back({b,w});
      rel[b].push_back({a,w});
    }
      priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>q;
      q.push({0,1});
      dist[1]=0;
      while(!q.empty())
  {   int curr=q.top().first;
      int currd=q.top().second;
        q.pop();
        for(int i=0;i<rel[curr].size();i++)
        {
          if(currd+rel[curr][i].second<dist[rel[curr][i].first])
          {
            dist[rel[curr][i].first]=currd+rel[curr][i].second;
            q.push({rel[curr][i].first,dist[rel[curr][i].first]});
          }
        }
    
  }

   for(int i=1;i<=n;i++)
    {cout<<dist[i]<<" ";}
}






// SOURCE NODE GIVEN: USING SET


vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        int source_node = S;
        set<pair<int,int>>s;  //{dist,node}
        vector<int>dist(V,INT_MAX);
        s.insert({0,source_node});
        dist[source_node]=0;
        while(!s.empty())
        {
            auto curr = *(s.begin());
            int curr_node = curr.second;
            int curr_dist = curr.first;
            s.erase(curr);
            for(auto it: adj[curr_node])
            {
                int adj_node = it[0];
                int edge_weight = it[1];
                if(curr_dist + edge_weight<dist[adj_node])
                {
                    if(dist[adj_node]!=INT_MAX) s.erase({dist[adj_node],adj_node});
                    
                    dist[adj_node]=curr_dist+edge_weight;
                    s.insert({dist[adj_node], adj_node});
                }
            }
        }
        return dist;
    }
