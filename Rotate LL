/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* rotateRight(ListNode* head, int k) {
        ListNode* fast=head;   ListNode* slow=head; ListNode* newe=head;long long count=0;
      
       if(!head||k==0||head->next==NULL) return head;
        
        while(newe)
        {count++;newe=newe->next;}
        
        
        if(k>=count){k=k%count; }
        cout<<k;
        if(k==0) return head;
        //int trav=count-k;
       
       while(k--)
        {
            if(!fast) fast=head;
          fast=fast->next;
        }
        while(fast->next)
        {
            fast=fast->next;
            slow=slow->next;
        }
       ListNode*store =slow->next;
        slow->next=NULL;
        //cout<<fast->val;
        fast->next=head;
        
        return store;
    }
};
