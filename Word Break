class Solution {
public:
int t[301][301];
bool sol(string s, vector<string>& wordDict, int i, int j, map<string, int>m)
{
    if(i>j) return true;
    if(t[i][j]!=-1) return t[i][j];
for(int k=i;k<=j;k++)
{
    cout<<s.substr(i,k-i+1)<<endl;
    bool temp = m[s.substr(i,k-i+1)] && sol(s,wordDict, k+1,j, m);
    if(temp) return t[i][j]=true;
}
return t[i][j]=false;
}
    bool wordBreak(string s, vector<string>& wordDict) {
        memset(t,-1,sizeof(t));
        map<string, int>m;
        for(int i=0;i<wordDict.size();i++)
        {
            m[wordDict[i]]++;
        }
        return sol(s, wordDict, 0, s.size()-1, m);
    }
};
