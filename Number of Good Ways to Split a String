class Solution {
public:
    int numSplits(string s) {
        int n=s.size(); map<char,int>m1; map<char,int>m2;
        
        for(int i=0;i<n;i++)
        {
            m1[s[i]]++;
        }
      
        int cnt=0;
         for(int i=0;i<n;i++)
        {
            if(m1.size()==m2.size()) cnt++;
            m1[s[n-i-1]]--;m2[s[n-i-1]]++;
            if(m1[s[n-i-1]]==0) m1.erase(s[n-i-1]);
            if(m2[s[n-i-1]]==0) m2.erase(s[n-i-1]);
        }
       return cnt;
    }
};




















class Solution {
public:
    int numSplits(string s) {
         int n=s.size(); map<char,int>m1; vector<int>p(n); vector<int>su(n); map<char,int>m2;
        p[0]=1; m1[s[0]]=1;  m2[s[n-1]]=1; su[n-1]=1;   // 3 3 3 2 2 1
        for(int i=1;i<n;i++)
        {
            if(m1[s[i]]==0) p[i]=p[i-1]+1;
            else{
                p[i]=p[i-1]; 
            }m1[s[i]]=1;
            if(m2[s[n-1-i]]==0) su[n-1-i]=su[n-i]+1;
           else { su[n-1-i]=su[n-i];}
            m2[s[n-1-i]]=1;
        }
        int cnt=0;
         for(int i=1;i<n;i++)
        {
            if(p[i-1]==su[i]) cnt++;
        cout<<su[i];
        }
       return cnt;
    }
};
