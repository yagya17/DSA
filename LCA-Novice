#include <bits/stdc++.h>
using namespace std;
int level[100001];
vector<int> rel[100001];
int par[100001];
void dfs(int key, int lvl,int p)
{ par[key]=p;
  level[key]=lvl;
  for(int i=0;i<rel[key].size();i++)
  {
    if(rel[key][i]!=p) dfs(rel[key][i],lvl+1,key);
  }
  
}
int lca(int a,int b)
{
 if(level[a]>level[b]) swap(a,b);
  int d=level[b]-level[a];
  while(d--)
  {
    b=par[b];
  }
  if(a==b) return a;
  while(a!=b) //novice//        OR   while(par[a]!=par[b])
  {a=par[a];
    b=par[b];
  }
  return a;                     //OR return par[a]
}
int main()
{   int n;cin>>n; //no. of nodes

   for(int i=1;i<n;i++) //edges=n-1 (trees)
   {
     int a; cin>>a;
     int b;cin>>b;
     rel[a].push_back(b);
     rel[b].push_back(a);
   }
   dfs(1,0,-1);
   int a;int b;cin>>a>>b;
   cout<<lca(a,b);
}
