class Solution {
public:
    int snakesAndLadders(vector<vector<int>>& board) {
        int n=board.size();
        vector<pair<int,int>>cells(n*n+1);
        vector<int>columns(n); int label=1;
        iota(columns.begin(),columns.end(),0);
        for(int row=n-1;row>=0;row--)
        {
            for(int j=0;j<n;j++)
              {cells[label]={row,columns[j]}; label++;}
              reverse(columns.begin(),columns.end());
        }
          vector<int>dist(n*n+1,-1);
          queue<int>q;
          dist[1]=0;
          q.push(1);
          while(!q.empty())
          {
              int curr=q.front();
              q.pop();
              for(int next=curr+1;next<=min(curr+6,n*n);next++)
              {
                  auto [row,column]=cells[next];
                  int dest;
                  if(board[row][column]!=-1) dest=board[row][column];
                  else dest=next;
                  if(dist[dest]==-1) {dist[dest]=dist[curr]+1;
                  q.push(dest);}

              }
          }

       return dist[n*n];
            
        
    }
};
