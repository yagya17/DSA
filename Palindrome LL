/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        ListNode* slow=head;
        ListNode* fast=head;
        if(head->next==NULL) return true;
        if(head->next->next==NULL) {if(head->next->val==head->val) return true; else return false; }
        while(fast&&fast->next&&fast->next->next)
        {
            slow=slow->next;
            fast=fast->next->next;
        }
       
    
        ListNode * prev=NULL;
        ListNode *curr=slow->next;
        ListNode * nxt=curr;
        while(curr)
        {
             nxt=nxt->next;
            curr->next=prev;
            prev=curr;
            curr=nxt;
           
        }
        slow->next=prev;
        slow=slow->next;

        while(slow)
       {   
           if(head->val!=slow->val) return false;
           head=head->next;
           slow=slow->next;
       }
        return true;
    }
};
